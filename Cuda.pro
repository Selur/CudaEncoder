# #####################################################################
# Automatically generated by qmake (2.01a) Di 10. Mai 15:51:01 2011
# #####################################################################
TEMPLATE = app
TARGET = Cuda
DEPENDPATH += . \
    encoder \
    nvidiaheader
INCLUDEPATH += .
CONFIG += console

# Input
HEADERS += nvidiaheader/mywindows.h \
    nvidiaheader/NVEncodeDataTypes.h \
    nvidiaheader/NVEncoderAPI.h \
    encoder/EncoderHandler.h \
    encoder/EncoderParameter.h \
    encoder/MyTimer.h
SOURCES += main.cpp \
    encoder/EncoderHandler.cpp \
    encoder/EncoderParameter.cpp \
    encoder/MyTimer.cpp
QMAKE_LIBDIR += $${PWD}/lib
win32-msvc* {
    message(Building for Windows using Qt $$QT_VERSION)
    CONFIG += c++11 # C++11 support
    QMAKE_CXXFLAGS += /bigobj # allow big objects
    !contains(QMAKE_HOST.arch, x86_64):QMAKE_LFLAGS += /LARGEADDRESSAWARE # allow the use more of than 2GB of RAM on 32bit Windows

    # # add during static build
    # QMAKE_CFLAGS_RELEASE += -MT
    # QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += -MT
    # QMAKE_CFLAGS_DEBUG = -Zi -MTd
    # QMAKE_LFLAGS += /DYNAMICBASE:NO
    # for Windows XP compatibility
    contains(QMAKE_HOST.arch, x86_64):QMAKE_LFLAGS += /SUBSYSTEM:WINDOWS,5.02 # Windows XP 64bit
    else:QMAKE_LFLAGS += /SUBSYSTEM:WINDOWS,5.01 # Windows XP 32bit
}
greaterThan(QT_MAJOR_VERSION, 4) { # QT5+
    win32-msvc*:DEFINES += NOMINMAX
}
win32 {
    !contains(QMAKE_HOST.arch, x86_64) {
        message("x86 build")
        LIBS += $${PWD}/lib/nvcuvenc.lib
    }
    else {
        message("x86_64 build")
        LIBS += $${PWD}/lib/nvcuvenc64.lib
    }
}
